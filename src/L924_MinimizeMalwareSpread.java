// 924. Minimize Malware Spread

import java.util.Arrays;

/*
Get all connected component, and find max one among who has only one infected machine

1. initialize union find structure
2. update size and Malware size of every component
3. for maximum ufSize, if malware count is 1, return that index
 */

public class L924_MinimizeMalwareSpread {
    private int[] roots;

    public int minMalwareSpread(int[][] g, int[] initial) {

        // initialize union find structure
        int n = g.length;
        roots = new int[n];
        for (int i = 0; i < n; i++) roots[i] = i;
        for (int i = 0; i < n; i++)
            for (int j = i + 1; j < n; j++)
                if (g[i][j] == 1) union(i, j);
        int[] ufSize = new int[n];
        int[] malCount = new int[n];

        // update size and Malware size of every component
        for (int i = 0; i < n; i++) ufSize[find(i)]++;
        for (int init : initial) malCount[find(init)]++;

        // for maximum ufSize, if malware count is 1, return that index
        int res = -1;
        int maxSize = 0;
        Arrays.sort(initial);
        for (int init : initial) {
            int idx = find(init);
            if (malCount[idx] == 1 && ufSize[idx] > maxSize) {
                maxSize = ufSize[idx];
                res = init;
            }
        }
        if (maxSize != 0) return res;
        else return initial[0];
    }

    private void union(int i, int j) {
        roots[find(i)] = find(j);
    }

    private int find(int i) {
        if (roots[i] == i) return i;
        roots[i] = find(roots[i]);
        return roots[i];
    }
}
